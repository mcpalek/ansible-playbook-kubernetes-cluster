- name: Check if Kubernetes is initialized
  ansible.builtin.command: test -d /etc/kubernetes/manifests
  register: kubernetes_initialized
  ignore_errors: true
- name: Set fact if Kubernetes is initialized
  ansible.builtin.set_fact:
    kubernetes_is_initialized: "{{ kubernetes_initialized.rc == 0 }}"
  
- name: Debug initialization status
  debug:
    msg: "Kubernetes is initialized: {{ kubernetes_is_initialized }}"

- name: Initialize Kubernetes
  ansible.builtin.shell: |
    sudo kubeadm init --apiserver-advertise-address={{ ansible_default_ipv4.address }} --control-plane-endpoint={{ ansible_default_ipv4.address }} --apiserver-cert-extra-sans={{ ansible_default_ipv4.address }} --pod-network-cidr=10.0.0.0/16 --upload-certs
  when:  not kubernetes_is_initialized
  register: output

- name: Storing Logs and Generated token for future purpose
  ansible.builtin.copy:
    content: "{{ output.stdout | default('Kubernetes was already initialized; no output generated.') }}"
    dest: "/tmp/token"
  when: output is defined and output.stdout is defined

- debug:
    msg: "{{ output.stdout | default('Kubernetes was already initialized; no output generated.') }}"
  when: output is defined and output.stdout is defined

- name: Generated token - 1.
  ansible.builtin.shell: sed -n 83,84p /tmp/token > /tmp/workertoken

#this command copy worker join command from Master server t Ansible controller
- name: Copy master token
  ansible.builtin.fetch:
    src: /tmp/workertoken
    dest: /tmp/join-worker-command.sh
    flat: true

- name: Check if .kube/config exists
  ansible.builtin.stat:
    path: "$HOME/.kube/config"
  register: kube_config_exists

- name: Create .kube folder if needed
  ansible.builtin.shell: mkdir -p $HOME/.kube
  when: not kube_config_exists.stat.exists

- name: Copy admin.conf to .kube/config if needed
  ansible.builtin.shell: sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  when: not kube_config_exists.stat.exists

- name: Change ownership of .kube/config if needed
  ansible.builtin.shell: sudo chown $(id -u):$(id -g) $HOME/.kube/config
  when: not kube_config_exists.stat.exists

- name: Check if any node has the control-plane taint
  ansible.builtin.command:
    cmd: kubectl get nodes -o jsonpath='{.items[*].spec.taints[?(@.key=="node-role.kubernetes.io/control-plane")]}'
  register: control_plane_taint_check
  ignore_errors: true

- name: Remove control-plane taint if it exists
  ansible.builtin.shell: |
    kubectl taint nodes --all node-role.kubernetes.io/control-plane-
  when: control_plane_taint_check.stdout != ""


- name: Install Calico
  ansible.builtin.shell: |
    curl https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml -O
    kubectl apply -f calico.yaml





